using Microsoft.IdentityModel.Clients.ActiveDirectory;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Param_ItemNamespace.Services.Interfaces;

namespace Param_ItemNamespace.Services
{
    public class AuthenticateServiceADAL : IAuthenticateService
    {
        private const string tenant = ""; //TODO: Get Azure Tenant
        private readonly string clientId = "";//TODO: Get Azure Registered AppID
        private const string graphResourceId = "https://graph.windows.net"; //TODO: Replace with WebService AppID
        private const string aadInstance = "https://login.microsoftonline.com/{0}";
        private static readonly string authority = String.Format(CultureInfo.InvariantCulture, aadInstance, tenant);
        private readonly Uri redirectURI = null;
        private string userName;
        private readonly IAuthenticatePlatformService platformService;

        /// <summary>
        /// CTOR
        /// </summary>
        /// <param name="platformService"></param>
        public AuthenticateServiceADAL(IAuthenticatePlatformService platformService)
        {
            this.platformService = platformService;
            redirectURI = Task.Run(() => platformService.GetRedirectURIAsync()).Result;
        }

        /// <summary>
        /// Return username
        /// </summary>
        public string UserName
        {
            get
            {
                return userName;
            }
            set
            {
                int index = value.IndexOf("@");
                userName = (index < 0)
                  ? value
                  : value.Remove(index, value.Length - index);
            }
        }

        /// <summary>
        /// returns last TokenRequestStatus from a GetTokenAsync()
        /// </summary>
        public AuthenticationResultCode TokenRequestStatus { get; set; }

        /// <summary>
        /// Gets Access Tokens
        /// </summary>
        /// <returns>Task</returns>
        public async Task ClearTokenCacheAsync()
        {
            var authContext = new AuthenticationContext(authority);
            if (authContext.TokenCache.ReadItems().Any())
                authContext.TokenCache.Clear();

            userName = string.Empty;
            await platformService.ClearCookies(authority).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets Tokens
        /// </summary>
        /// <returns>Token</returns>
        public async Task<string>  GetTokenAsync()
        {
            string token = string.Empty;
            AuthenticationResult result = null;
            var authContext = new AuthenticationContext(authority);
            if (authContext != null)
            {
                try
                {
                    TokenRequestStatus = AuthenticationResultCode.Success;
                    result = await authContext.AcquireTokenAsync(graphResourceId, clientId, redirectURI, platformService.PlatformParameters).ConfigureAwait(false);

                    token = result.AccessToken;
                    if (string.IsNullOrEmpty(UserName))
                    {
                        UserName = result.UserInfo.DisplayableId;
                    }
                }
                // Exception: AdalServiceException represents 
                // Represents an error produced by the STS.
                catch (AdalServiceException)
                {
                    TokenRequestStatus = AuthenticationResultCode.ProviderError;
                    await ClearTokenCacheAsync().ConfigureAwait(false);
                }
                // Exception: AdalException 
                // Represents a library exception generated by ADAL .NET
                catch (AdalException ae)
                {
                    switch (ae.ErrorCode)
                    {
                        case "authentication_canceled":
                            TokenRequestStatus = AuthenticationResultCode.Canceled;
                            break;
                        case "access_denied":
                            TokenRequestStatus = AuthenticationResultCode.Denied;
                            break;
                        default:
                            TokenRequestStatus = AuthenticationResultCode.Unknown;
                            break;
                    }
                    await ClearTokenCacheAsync().ConfigureAwait(false);
                }
                catch (Exception)
                {
                    throw;
                }
            }
            return token;
        }
    }
}
